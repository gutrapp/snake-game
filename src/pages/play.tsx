import { NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import { trpc } from "../utils/trpc";

const BOARD_DIMENSIONS = 20;

const Play: NextPage = () => {
  const utils = trpc.useContext();
  const createScore = trpc.rankings.createRanking.useMutation();

  const [name, setName] = useState<string>("");

  const [board, setBoard] = useState<string[][]>(
    Array(BOARD_DIMENSIONS).fill(Array(BOARD_DIMENSIONS).fill("."))
  );

  const [snake, setSnake] = useState<number[][]>([
    [3, 3],
    [3, 4],
  ]);

  const [fruit, setFruit] = useState<number[]>([15, 15]);

  const [direction, setDirection] = useState<number>(1);

  const [score, setScore] = useState<number>(0);

  const [game, setGame] = useState<boolean>(true);

  const moveSnake = () => {
    var newSnake: number[][] = [];
    var prevTail: number[] = [snake[0][0], snake[0][1]];
    for (var body = 0; body < snake.length - 1; body++) {
      newSnake.push(snake[body + 1]);
    }

    if (direction == 1) {
      newSnake.push([
        snake[snake.length - 1][0],
        (snake[snake.length - 1][1] as number) + 1,
      ]);
    }
    if (direction == 2) {
      newSnake.push([
        snake[snake.length - 1][0],
        (snake[snake.length - 1][1] as number) - 1,
      ]);
    }
    if (direction === 3) {
      newSnake.push([
        (snake[snake.length - 1][0] as number) + 1,
        snake[snake.length - 1][1],
      ]);
    }
    if (direction == 4) {
      newSnake.push([
        (snake[snake.length - 1][0] as number) - 1,
        snake[snake.length - 1][1],
      ]);
    }
    checkMove(newSnake, fruit, prevTail);
  };

  const checkMove = (
    newSnake: number[][],
    fruit: number[],
    prevTail: number[]
  ) => {
    var state = true;
    for (var body = 0; body < newSnake.length - 2; body++) {
      if (
        newSnake[body][0] == newSnake[newSnake.length - 1][0] &&
        newSnake[body][1] == newSnake[newSnake.length - 1][1]
      ) {
        state = false;
      }
    }
    if (
      newSnake[newSnake.length - 1][0] == BOARD_DIMENSIONS ||
      newSnake[newSnake.length - 1][1] == BOARD_DIMENSIONS ||
      newSnake[newSnake.length - 1][0] == -1 ||
      newSnake[newSnake.length - 1][1] == -1
    ) {
      state = false;
    }
    if (
      newSnake[newSnake.length - 1][0] == fruit[0] &&
      newSnake[newSnake.length - 1][1] == fruit[1]
    ) {
      newSnake.splice(0, 0, prevTail);
      setFruit([
        getRndInteger(0, BOARD_DIMENSIONS - 1),
        getRndInteger(0, BOARD_DIMENSIONS - 1),
      ]);
      setScore(score + 1);
    }

    if (state) {
      setSnake(newSnake);
    } else {
      setGame(false);
    }
  };

  const handleKeyboard = (key: string) => {
    if (key == "ArrowRight") return 1;
    if (key == "ArrowLeft") return 2;
    if (key == "ArrowDown") return 3;
    if (key == "ArrowUp") return 4;
    return 1;
  };

  useEffect(() => {
    const interval = setInterval(() => {
      moveSnake();
      window.addEventListener("keydown", (event) => {
        setDirection(handleKeyboard(event.key));
      });
    }, 150);
    return () => clearInterval(interval);
  }, [snake]);

  const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {
    setName(event.target.value);
  };

  const handleDisplay = (i: number, j: number) => {
    for (var body = 0; body < snake.length; body++) {
      if (snake[body][0] == i && snake[body][1] == j) {
        return (
          <h1 className="h-10 w-10 border-2 border-green-900 bg-green-700"></h1>
        );
      }
    }
    if (i == fruit[0] && j == fruit[1]) {
      return (
        <h1 className="h-10 w-10 border-2 border-rose-900 bg-rose-500"></h1>
      );
    }
    return <h1 className="h-10 w-10 border-2 border-gray-400 bg-white"></h1>;
  };

  const resetGame = () => {
    setSnake([
      [3, 3],
      [3, 4],
    ]);
    setFruit([15, 15]);
    setDirection(1);
    setScore(0);
    setName("");
    setGame(true);
  };

  return (
    <>
      <Head>
        <title>Snake Game</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-full min-h-screen bg-gradient-to-br from-[#27272a] via-[#18181b] to-[#171717] text-white">
        <a href="/">
          <h1 className="p-5 text-2xl">
            <i className="fa-solid fa-arrow-left"></i> Exit
          </h1>
        </a>

        <div>
          {game ? (
            <div className="mr-96 ml-96 px-40 ">
              <div className="rounded-3xl border-2 border-[#404040] bg-gradient-to-br from-[#27272a] to-[#18181b] px-4 pb-5">
                <h1 className="mt-1 mb-1 w-16 rounded-3xl bg-white px-5 text-center text-3xl font-bold text-black">
                  {score}
                </h1>
                {board.map((row, i) => {
                  return (
                    <div key={i} className="flex flex-row">
                      {row.map((col, j) => {
                        return <div key={j}>{handleDisplay(i, j)}</div>;
                      })}
                    </div>
                  );
                })}
              </div>
            </div>
          ) : (
            <div className="mt-24 mr-72 ml-72 flex flex-col rounded-3xl border-4 border-[#404040] bg-gradient-to-br from-[#27272a] to-[#18181b] p-16 text-center font-semibold text-white">
              <h1 className="text-6xl text-rose-800">You Lost!</h1>
              <h2 className="py-8 text-3xl">
                Would you like to save this score?
              </h2>
              <label className="flex flex-col text-5xl">{score}</label>

              <form
                onSubmit={(event) => {
                  event.preventDefault();
                  createScore.mutate({
                    name: name,
                    score: score,
                  });
                  resetGame();
                }}
                className="flex flex-col justify-items-start py-7 text-2xl"
              >
                <label>Choose a name to be displayed:</label>
                <input
                  value={name}
                  onChange={(event) => handleChangeName(event)}
                  className="ml-60 mr-60 mt-2 rounded-full px-2 text-black"
                  placeholder="Your name"
                  type="text"
                />
                <div className="mt-4">
                  <button
                    className="rounded-full border-4 border-[#404040] bg-gradient-to-br from-[#27272a] to-[#18181b] py-2 px-6 text-2xl duration-300 ease-out hover:scale-110"
                    type="submit"
                  >
                    Save
                  </button>
                </div>
              </form>

              <div>
                <button
                  onClick={() => {
                    resetGame();
                  }}
                  className="mt-4 rounded-full border-4 border-[#404040] bg-gradient-to-br from-[#27272a] to-[#18181b] p-5 text-4xl duration-300 ease-out hover:scale-110"
                >
                  Restart
                </button>
              </div>
            </div>
          )}
        </div>
      </main>
    </>
  );
};

function getRndInteger(min: number, max: number) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

export default Play;
